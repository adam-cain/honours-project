// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Model Definitions
model User {
  id                String              @id @default(cuid())
  username          String              @unique
  email             String?             @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  accounts          Account[]
  sessions          Session[]
  memberOfTeam      TeamMember[]
  teamAccessRequest TeamAccessRequest[]
  teamInvitation    TeamInvitation[]
}

model Team {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?  @db.Text
  logo         String?  @db.Text
  subDomain    String   @unique
  customDomain String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  members           TeamMember[]
  teamInvitation    TeamInvitation[]
  teamAccessRequest TeamAccessRequest[]

  chat   Chat[]
  flows  Flow[]
  Script Script[]
}

model TeamMember {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEW_ONLY
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  publish     Boolean? @default(false)

  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deployed  Boolean  @default(false)

  @@unique([name, teamId])
}

model Script {
  id           String   @id @default(cuid())
  name         String
  description  String?  @db.Text
  publish      Boolean? @default(false)
  isJavascript Boolean

  rawCode         String? @db.Text
  devCompiledURL  String?
  prodCompiledURL String?
  params          Json?
  envVars         String[]
  returnType      String?
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deployed  Boolean  @default(false)

  @@unique([name, teamId])
}

model Flow {
  id          String @id @default(cuid())
  name        String
  description String

  nodes String?
  edges String?

  flowPath          String?
  cronPath          String?

  publish           Boolean? @default(false)
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deployed  Boolean  @default(false)

  @@unique([name, teamId])
}

enum RequestStatus {
  PENDING
  APPROVED
  DECLINED
}

model TeamInvitation {
  id            String   @id @default(cuid())
  team          Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId        String
  invitedUser   User     @relation(fields: [invitedUserId], references: [id])
  invitedUserId String
  role          Role     @default(MEMBER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TeamAccessRequest {
  id                String        @id @default(cuid())
  team              Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId            String
  requestedByUser   User          @relation(fields: [requestedByUserId], references: [id], onDelete: Cascade)
  requestedByUserId String
  status            RequestStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([teamId, requestedByUserId])
}
