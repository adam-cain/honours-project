// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Model Definitions
model User {
  id                        String                      @id @default(cuid())
  username                  String                      @unique
  email                     String?                     @unique
  emailVerified             DateTime?
  password                  String?
  image                     String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  accounts                  Account[]
  sessions                  Session[]
  memberOfOrganization      OrganizationMember[]
  OrganizationAccessRequest OrganizationAccessRequest[]
  OrganizationInvitation    OrganizationInvitation[]
}

model Organization {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?  @db.Text
  logo         String?  @db.Text
  subDomain    String   @unique
  customDomain String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  members                   OrganizationMember[]
  chat                      Chat[]
  OrganizationInvitation    OrganizationInvitation[]
  OrganizationAccessRequest OrganizationAccessRequest[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role           Role         @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, userId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEW_ONLY
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id             String       @id @default(cuid())
  name           String
  description    String?      @db.Text
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deployed       Boolean      @default(false)

  @@unique([name, organizationId])
}

model OrganizationInvitation {
  id              String           @id @default(cuid())
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  invitedUser     User             @relation(fields: [invitedUserId], references: [id])
  invitedUserId   String
  email           String?
  username        String?
  invitedByUserId String
  status          InvitationStatus @default(PENDING)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([organizationId, email])
  @@unique([organizationId, username])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model OrganizationAccessRequest {
  id                String        @id @default(cuid())
  organization      Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId    String
  requestedByUser   User          @relation(fields: [requestedByUserId], references: [id], onDelete: Cascade)
  requestedByUserId String
  status            RequestStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([organizationId, requestedByUserId])
}

enum RequestStatus {
  PENDING
  APPROVED
  DECLINED
}
